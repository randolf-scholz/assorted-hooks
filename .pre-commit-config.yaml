exclude: '(\.git/|\.venv/|\.idea/|\docs/_build/)'
minimum_pre_commit_version: 3.5.0
default_language_version:
  python: python3.11
  node: "20.10.0"
repos:
  #  - repo: meta
  #    hooks:
  #      - id: identity
  - repo: local
    hooks:
      # pyproject.toml
      - id: pyproject-validate-version
        name: pyproject-validate-version
        entry: "./src/assorted_hooks/scripts/pyproject_validate_version.py"
        files: ^pyproject\.toml$
        language: script
        types: [toml]
        description: "Validate python version (PEP-440)."
      - id: pyproject-update-deps
        name: pyproject-update-deps
        entry: "./src/assorted_hooks/scripts/pyproject_update_dependencies.py"
        files: ^pyproject\.toml$
        language: script
        stages: [manual]
        types: [toml]
        description: "Update dependencies to >=currently_installed. (default: manual)"
      - id: pyproject-check-deps
        name: pyproject-check-deps
        entry: "./src/assorted_hooks/scripts/pyproject_check_dependencies.py"
        files: ^pyproject\.toml$
        language: script
        types: [toml]
        description: "Check that listed dependencies are used in code and vice-versa."
      # scripts
      - id: python-check-clean-interface
        name: python-check-clean-interface
        entry: "./src/assorted_hooks/scripts/check_clean_interface.py"
        require_serial: true # otherwise module is loaded multiple times
        language: script
        types: [python]
        files: ^src/
        description: "Check for clean interface."
      # pygrep
      - id: check-separator-length
        name: check-separator-length
        entry: ^#(.{0,83}|.{85,})([-=═─—])\2{2}$
        language: pygrep
        types: [python]
        files: (^src/|^tests/)
        description: "Check that 'line-break'-comments are the right length (default: 88)."
      - id: python-no-blanket-type-ignore
        name: python-no-blanket-type-ignore
        entry: '.# *type: *ignore(?!\[)'
        language: pygrep
        types: [python]
        files: (^src/|^tests/)
        description: "Enforce that `# type: ignore` annotations always specify codes."
      - id: python-no-builtin-eval
        name: python-no-builtin-eval
        entry: '(?<!def\s)(?<!\.)\b(builtins\.)?(eval\()'
        language: pygrep
        types: [python]
        files: (^src/|^tests/)
        description: "Disallows eval() but allows obj.eval()."
      #      - id: python-consider-using-raw-string
      #        name: python-consider-using-raw-string
      #        entry: '\s+"""\S'
      #        language: pygrep
      #        types: [python]
      #        description: "Checks that triple quoted strings are raw (docstrings)."
      # ast-based
      - id: python-use-imported-attributes
        name: python-use-imported-attributes
        entry: check-imported-attributes
        language: python
        types: [python]
        files: (^src/|^tests/)
        description: "Checks that Bar is used instead of foo.Bar if both foo and Bar are imported."
      - id: python-check-no-mixed-args
        name: python-check-no-mixed-args
        entry: check-no-mixed-args
        language: python
        types: [python]
        files: (^src/|^tests/)
        description: "Check for disallowing positional_or_keyword arguments."
      - id: python-check-standard-generics
        name: python-check-standard-generics
        entry: check-standard-generics
        language: python
        types: [python]
        files: (^src/|^tests/)
        description: "Use standard generics (PEP-585): typing.Sequence -> abc.Sequence, typing.List -> list."
      - id: python-check-dunder-all-exists
        name: python-check-dunder-all-exists
        entry: check-dunder-all-exists
        language: python
        types: [python]
        files: ^src/
        description: "Check that __all__ exists."
      - id: python-check-typing
        name: python-check-typing
        entry: check-typing
        language: python
        types: [python]
        description: "AST-based linting rule for type-hints."
  # https://pre-commit.com/hooks.html
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-added-large-files
        description: "prevents giant files from being committed."
      - id: check-ast
        description: "simply checks whether the files parse as valid python."
      - id: check-builtin-literals
        description: "requires literal syntax when initializing empty or zero python builtin types."
      - id: check-case-conflict
        description: "checks for files with names that would conflict on a case-insensitive filesystem."
      - id: check-json
        description: "checks json files for parseable syntax."
      - id: check-executables-have-shebangs
        description: "ensures that (non-binary) executables have a shebang."
      - id: check-shebang-scripts-are-executable
        description: "ensures that (non-binary) files with a shebang are executable."
      - id: check-symlinks
        description: "checks for symlinks which do not point to anything."
      - id: check-toml
        description: "checks toml files for parseable syntax."
      - id: check-xml
        description: "checks xml files for parseable syntax."
      - id: check-yaml
        description: "checks yaml files for parseable syntax."
      - id: debug-statements
        description: "checks for debugger imports and py37+ `breakpoint()` calls in python source."
      - id: end-of-file-fixer
        description: "ensures that a file is either empty, or ends with one newline."
      - id: fix-byte-order-marker
        description: "removes utf-8 byte order marker."
      - id: pretty-format-json
        args: ["--autofix"]
        description: "sets a standard for formatting json files."
      - id: requirements-txt-fixer
        description: "sorts entries in requirements.txt"
      - id: trailing-whitespace
        description: "trims trailing whitespace."
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
        description: "Enforce that `noqa` annotations always occur with specific codes. Sample annotations: `# noqa: F401`, `# noqa: F401,W203`"
      - id: python-no-log-warn
        description: "Enforce that `logging.warn` is not used."
      - id: rst-directive-colons
        description: "Enforce that RST directives have colons."
      - id: rst-inline-touching-normal
        description: "Detect mistake of inline code touching normal text in rst"
  # prettier
  #  - repo: https://github.com/pre-commit/mirrors-prettier
  #    rev: v4.0.0-alpha.8
  #    hooks:
  #      - id: prettier
  # absolufy-imports
  - repo: https://github.com/MarcoGorelli/absolufy-imports
    rev: v0.3.1
    hooks:
      - id: absolufy-imports
        files: (^src/|^tests/)
  # isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--check"]
  # ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.14
    hooks:
      - id: ruff
        files: (^src/|^tests/)
      - id: ruff-format
        files: (^src/|^tests/)
  # markdownlint
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args:
            [
                "--disable",
                "MD013", # Line length
                "--"  # otherwise files are interpreted as args
            ]
  # mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        files: (^src/|^tests/)
        additional_dependencies: [types-all]
        args:
          [
            "--hide-error-context",
            "--hide-error-end",
            "--no-pretty",
            "--no-error-summary",
          ]
  # pyright
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.349
    hooks:
      - id: pyright
        files: (^src/|^tests/)
