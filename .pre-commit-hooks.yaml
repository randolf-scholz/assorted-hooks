# Custom hooks for pre-commit.

# region ast-based ---------------------------------------------------------------------
- id: check-direct-imports
  entry: check-direct-imports
  name: '[py] avoid unnecessary attribute lookup.'
  description: "Checks that Bar is used instead of foo.Bar if both foo and Bar are imported."
  language: python
  types: [python]
- id: check-signatures
  entry: check-signatures
  name: '[py] Check function signatures.'
  description: "AST-based linting rules for function signatures."
  language: python
  types: [python]
- id: check-dunder-all
  entry: check-dunder-all
  name: '[py] check __all__.'
  description: "Check that __all__ exists. `test_*.py` files are excluded by default."
  exclude: '^(.*\/)?test_.*\.py$'
  language: python
  types: [python]
- id: check-typing
  entry: check-typing
  name: '[py] check type hints.'
  description: "AST-based linting rule for type-hints."
  language: python
  types: [python]
- id: check-runtime-dataprotocol
  entry: check-runtime-dataprotocol
  name: '[py] checks for @runtime-checkable data protocols.'
  description: 'Do not use @runtime-checkable with data protocols.'
  language: python
  types: [python]
# endregion ast-based ------------------------------------------------------------------

# region misc --------------------------------------------------------------------------
- id: check-archived-hooks
  entry: check-archived-hooks
  name: '[pre-commit] Check for deprecated hooks.'
  description: "Check for references to archived hooks. (Requires network access)"
  require_serial: true
  language: python
  types: [yaml]
  files: ^\.pre-commit-config\.yaml$
  stages: [pre-push]
- id: check-resolved-github-issues
  entry: check-github-issues
  name: '[text] Check for resolved GitHub issues.'
  description: 'Check for references to resolved GitHub issues.'
  require_serial: true
  language: python
  stages: [manual]
  types: [text]
- id: check-requirements-valid
  entry: check-requirements-valid
  name: '[pyproject] Check requirements valid.'
  description: 'Check that requirements are well-formed.'
  files: ^pyproject\.toml$
  language: python
  types: [toml]
- id: check-requirements-maintained
  entry: check-requirements-maintained
  name: '[pyproject] Check requirements maintained.'
  description: 'Check that dependencies have been maintained. (Requires network access)'
  files: ^pyproject\.toml$
  language: python
  types: [toml]
  stages: [pre-push]
- id: check-spelling-wise-suffix
  entry: check-spelling-wise-suffix
  name: '[text] Avoid inconsistent "-wise" suffix spelling.'
  description: 'Check for consistent use of "-wise" suffix.'
  language: python
  types: [text]
  require_serial: true
- id: check-tests-mirror-source
  entry: check-tests-mirror-source
  name: 'Check tests mirror source.'
  description: 'Check that test folder structure mirrors source folder structure.'
  types: [directory]
  language: python
# endregion misc -----------------------------------------------------------------------

# region scripts -----------------------------------------------------------------------
- id: check-requirements-used
  entry: src/assorted_hooks/scripts/check_requirements_used.py
  name: '[pyproject] Check requirements used.'
  description: "Check that listed dependencies are used in code and vice-versa."
  files: ^pyproject\.toml$
  language: script
  types: [toml]
- id: update-requirements
  entry: src/assorted_hooks/scripts/update_requirements.py
  name: '[pyproject] Update requirements.'
  description: "Update dependencies to >=currently_installed."
  files: ^pyproject\.toml$
  language: script
  types: [toml]
- id: check-clean-interface
  entry: src/assorted_hooks/scripts/check_clean_interface.py
  name: '[py] Check clean interface.'
  description: "Check that __all__ holds all exported variables."
  language: script
  require_serial: true # otherwise module is loaded multiple times
  types: [python]
# endregion scripts --------------------------------------------------------------------

# region pyright-wrapper ---------------------------------------------------------------
- id: pyright-concise
  name: pyright-concise
  description: "Wrapper for pyright that produces more concise output."
  entry: src/pyright_wrapper.sh
  language: script
  types_or: [python, pyi]
  require_serial: true
# endregion pyright-wrapper ------------------------------------------------------------

# region pygrep ------------------------------------------------------------------------
- id: check-separator-length-80
  name: '[text] Check separator length is 80.'
  description: "Check that 'horizontal rule' comments are the right length (80)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{0,69}|.{71})([-=\\u2500-\\u257F])\3{7}$'
- id: check-separator-length-88
  name: '[text] Check separator length is 88.'
  description: "Check that 'horizontal rule' comments are the right length (88)."
  entry: '^(\#.|\%.|\/\/)(.{0,77}|.{79,})([-=\\u2500-\\u257F])\3{7}$'
  language: pygrep
  types: [text]
- id: check-separator-length-100
  name: '[text] Check separator length is 100.'
  description: "Check that 'horizontal rule' comments are the right length (100)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{0,89}|.{91})([-=\\u2500-\\u257F])\3{7}$'
- id: check-separator-length-120
  name: '[text] Check separator length is 120.'
  description: "Check that 'horizontal rule' comments are the right length (120)."
  language: pygrep
  entry: '^(\#.|\%.|\/\/)(.{0,109}|.{111})([-=\\u2500-\\u257F])\3{7}$'
- id: python-no-blanket-type-ignore
  name: '[py] No blanket type ignore.'
  description: "Enforce that `# type: ignore` annotations always specify codes."
  entry: '\#\s*(type|pyright)\:\s*ignore(?!\[)'
  language: pygrep
  types: [python]
- id: python-no-builtin-eval
  name: '[py] No builtin eval.'
  description: "Disallows eval() but allows obj.eval()."
  entry: '(?<!def\s)(?<!\.)\b(builtins\.)?(eval\()'
  language: pygrep
  types: [python]
- id: python-consider-using-raw-string
  name: '[py] use r"""raw strings""" for docstrings.'
  description: "Checks that triple quoted strings are raw (docstrings). Use `$1r$2` find/replace."
  entry: '(\A|\s)("""[^\s\.\,\]\)\}][^\\]*?""")'
  language: pygrep
  types: [python]
- id: python-system-exit
  name: '[py] Use `raise SystemExit` instead of `sys.exit`.'
  description: 'Consider using `raise SystemExit(1)` instead of `sys.exit(1)`.'
  entry: '\b(sys\.exit)\('
  language: pygrep
  types: [python]
- id: python-match-case-builtins
  name: '[py] use "str(name)" instead of "str() as name".'
  description: "Checks that `str(name)` is used instead of `str() as name` (more readable)."
  entry: '\b(bool|bytearray|bytes|dict|float|frozenset|int|list|set|str|tuple)\(\)\s+as\s+'
  language: pygrep
  types: [python]
- id: numpy-rename-axes-axis
  name: '[numpy] Use "axis=" instead of "axes=".'
  description: "Rename 'axes=' to 'axis=' (numpy convention)."
  entry: '\b(axes=)'
  language: pygrep
  types: [python]
- id: pyarrow-timestamp-seconds
  name: '[pyarrow] Avoid timestamps with unit="s".'
  description: "Flags `timestamp('s')` as a potential bug."
  entry: '\b(timestamp\[s\]\[pyarrow\]|timestamp\((unit=)?"s"|datetime64\[s\])'
  language: pygrep
  types: [python]
#- id: python-avoid-match-case-builtins
#  name: '[py] use "str() as name" instead of "str(name)".'
#  description: "checks that `str() as name` is used instead of `str(name)` (faster)."
#  entry: '\b(bool|bytearray|bytes|dict|float|frozenset|int|list|set|str|tuple)\(\)\s+as\s+'
#  language: pygrep
#  types: [python]
# endregion pygrep ---------------------------------------------------------------------
