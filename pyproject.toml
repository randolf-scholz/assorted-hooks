[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

# region project configuration ---------------------------------------------------------
[project]
name = "assorted-hooks"
version = "0.6.22"
authors = [{ name = "Randolf Scholz", email = "randolf.scholz@gmail.com" }]
description = "Custom pre-commit hooks"

# package content
license = { file = "LICENSE" }
readme = "README.md"

# meta-information
keywords = ["pre-commit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
    "Typing :: Typed",
]

# dependencies
requires-python = ">=3.12"
dependencies = [
    "aiohttp>=3.11.18",
    "packaging>=25.0",
    "pygithub>=2.6.1",
    "pyyaml>=6.0.2",
    "typing-extensions>=4.13.2",
]

[project.urls]
repository = "https://github.com/randolf-scholz/assorted-hooks"

[project.scripts]
# ast hooks
check-dunder-all = "assorted_hooks.ast.check_dunder_all:main"
check-direct-imports = "assorted_hooks.ast.check_direct_imports:main"
check-signatures = "assorted_hooks.ast.check_signatures:main"
check-standard-generics = "assorted_hooks.ast.check_standard_generics:main"
check-typing = "assorted_hooks.ast.check_typing:main"
check-runtime-dataprotocol = "assorted_hooks.ast.check_runtime_dataprotocol:main"
# other hooks
check-archived-hooks = "assorted_hooks.check_archived_hooks:main"
check-github-issues = "assorted_hooks.check_github_issues:main"
check-requirements-maintained = "assorted_hooks.check_requirements_maintained:main"
check-requirements-valid = "assorted_hooks.check_requirements_valid:main"
check-spelling-wise-suffix = "assorted_hooks.check_spelling_wise_suffix:main"
check-tests-mirror-source = "assorted_hooks.check_tests_mirror_source:main"
# script hooks
check-clean-interface = "assorted_hooks.scripts.check_clean_interface:main"
check-requirements-used = "assorted_hooks.scripts.check_requirements_used:main"
update-requirements = "assorted_hooks.scripts.update_requirements:main"
# endregion project configuration ------------------------------------------------------


# region development dependencies ------------------------------------------------------
[dependency-groups]
dev = [
    {include-group="linters"}, {include-group="tests"}, {include-group="typing"},
]
typing = [
    "mypy>=1.15.0",
    "pyright>=1.1.400",
    "types-pyyaml>=6.0.12.20250516",
]
    linters = [
    "pre-commit>=4.2.0",
    "pylint>=3.3.7",
    "ruff>=0.11.10",
    "tach>=0.29.0",
]
tests = ["pytest>=8.3.5"]
# endregion development dependencies ---------------------------------------------------


# region ruff configuration ------------------------------------------------------------
[tool.ruff]
src = ["src/", "tests/"]
indent-width = 4
line-length = 88
target-version = "py312"
output-format = "concise"

[tool.ruff.lint]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
#
#select = [
#    "A",    # builtins
#    "ARG",  # unused-arguments
#    "B",    # bugbear
#    "C4",   # comprehensions
#    "D",    # pydocstyle
#    "E",    # pycodestyle
#    "EXE",  # executable
#    "F",    # pyflakes
#    "FBT",  # boolean-trap
#    "FURB", # refurb
#    "I",    # import-order
#    "ICN",  # import-conventions
#    "ISC",  # implicit-str-concat
#    "NPY",  # numpy
#    "N",    # naming
#    "PERF", # performance related
#    "PIE",  # pie
#    "PL",   # pylint
#    "PT",   # pytest
#    # "PTH",   # path
#    "PYI", # pyi
#    # "RET",   # return
#    "RUF",  # ruff specific
#    "S101", # use of `assert`
#    "SIM",  # simplify
#    "TCH",  # type-checking
#    "TRY",  # tryceratops
#    "UP",   # pyupgrade
#    "W",    # warnings
#]
select = ["ALL"]
ignore = [
    # fully ignored:
    "COM",      # comma
    "CPY",      # missing-copyright
    "DTZ",      # timezone-naive-datetime
    "EM",       # error-messages
    "ERA",   # commented-out-code
    "FIX",      # fixme
    "T20",      # flake8-print
    "TD",       # todo
    # partially ignored:
    # mccabe
    "C90",      # too-complex
    # pydocstyle
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D105",     # Missing docstring in magic method
    "D107",     # Missing docstring in __init__
    # pydoclint
    "DOC201",   # docstring-missing-returns
    "DOC402",   # docstring-missing-yields
    "DOC501",   # docstring-missing-exception
    # pycodestyle
    "E201",     # Whitespace after '('
    "E202",     # Whitespace before ')'
    "E203",     # Whitespace before ':'
    "E221",     # Multiple spaces before operator
    "E241",     # Multiple spaces after comma
    "E271",     # Multiple spaces after keyword
    "E272",     # Multiple spaces before keyword
    # pylint
    "PLC2401",  # non-ascii-name
    "PLC2801",  # unnecessary-dunder-call
    "PLR0124",  # Name compared with itself
    "PLR2004",  # Magic value used in comparison
    "PLR6104",  # non-augmented-assignment
    "PLR6301",  # no-self-use
    # pylint "too-many-*" rules
    "PLR0904",  # Too many public methods
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many boolean expressions
    "PLR0917",  # Too many positional arguments
    # flake8-use-pathlib
    "PTH123",   # builtin-open
    # RET
    "RET504",   # unnecessary-assign
    # RUFF
    "RUF001",   # ambiguous-unicode-character-string
    "RUF002",   # ambiguous-unicode-character-docstring
    "RUF003",   # ambiguous-unicode-character-comment
    "RUF012",   # Mutable class attributes should be annotated with typing.ClassVar # FIXME: PEP 603
    "RUF013",   # PEP 484 prohibits implicit Optional
    "RUF022",   # __all__ not sorted
    # tryceratops
    "TRY003",   # Avoid specifying long messages outside the exception class
    # pyupgrade
    "UP007",    # Use `X | Y` for type annotations
    "UP045",    # Use `X | None` for type annotations
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "N803"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
# endregion ruff configuration ---------------------------------------------------------


# region pylint configuration ----------------------------------------------------------
[tool.pylint]
[tool.pylint."MESSAGES CONTROL"]
enable = ["useless-suppression"]
disable = [
    "C0103",  # invalid-name  # Ridiculous...
    "C0144",  # non-ascii-name
    "C0204",  # bad-mcs-classmethod-argument
    "C0301",  # line-too-long
    "E0611",  # no-name-in-module
    "E1101",  # no-member  # FIXME: too many false positives
    "E1102",  # not-callable  # FIXME: too many false positives (torch)
    "E1121",  # too-many-function-args  # FIXME: too many false positives
    "E1123",  # unexpected-keyword-arg  # FIXME: too many false positives
    "E1130",  # invalid-unary-operand-type
    "E1139",  # invalid-metaclass  # FIXME: too many false positives
    "R0801",  # similar lines
    "R0902",  # too-many-instance-attributes
    "R0903",  # too-few-public-methods
    "R0911",  # too-many-return-statements
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
    # "W0221",  # arguments-differ
    # "W0511",  # (fixme) (todos)
    "W1113",  # keyword-arg-before-vararg
    "W2301",  # unnecessary-ellipsis
]
fail-on = [
    "C0116",  # missing-function-docstring
]
fail-under = 9.0

[tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and
# msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass
output-format = "colorized"

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.TYPECHECK]
# List of members which are set dynamically and missed by pylint inference system, and so shouldn't
# trigger E1101 when accessed. Python regular expressions are accepted.
generated-members = ["numpy.*", "torch.*"]
# endregion pylint configuration -------------------------------------------------------


# region mypy configuration ------------------------------------------------------------
[tool.mypy]
files = ["src/", "tests/"]
platform = "linux"
plugins = []

disable_error_code = [
    "func-returns-value", # SEE: https://github.com/python/mypy/issues/6549
    "method-assign",      # SEE: https://github.com/python/mypy/issues/2427#issuecomment-1419206807
    "no-overload-impl",   # SEE: https://github.com/python/mypy/issues/17618
    # "overload-overlap",   # SEE: https://mypy.readthedocs.io/en/stable/more_types.html#type-checking-the-variants
]

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# untyped definitions
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = true

## strictness flags
#strict = false
#strict_equality = false
implicit_reexport = false
#enable_error_code =[]
#disable_error_code = []
allow_untyped_globals = false
allow_redefinition = false

## configuring error messages
color_output = true
error_summary = true
hide_error_codes = false
pretty = false
show_absolute_path = false
show_column_numbers = true
show_error_code_links = false
show_error_context = true

[[tool.mypy.overrides]]
module = ["github.*"]
ignore_missing_imports = true
# endregion mypy configuration ---------------------------------------------------------


# region pyright configuration ---------------------------------------------------------
[tool.pyright]
venv = ".venv"
venvPath = "."
pythonPlatform = "Linux"
include = ["src/", "tests/"]
typeCheckingMode = "standard"
useLibraryCodeForTypes = true

## Type Check Diagnostics Settings
# SEE: https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
reportUnnecessaryTypeIgnoreComment = false

# strict mode flags we enable by default
reportUntypedClassDecorator = true
reportUnusedVariable = true
reportMatchNotExhaustive = false
reportUnnecessaryCast = true
#reportUnnecessaryComparison = true
reportUnnecessaryContains = true
#reportUnnecessaryIsInstance = true
#reportUnusedClass = true
#reportUnusedImport = true
#reportUnusedFunction = true
#reportUnusedVariable = true

# Disable these when running in strict mode
reportUnknownVariableType = false
reportUnknownMemberType = false
reportUnknownArgumentType = false
reportMissingTypeArgument = false
reportUnknownParameterType = false
reportMissingTypeStubs = false
reportConstantRedefinition = false  # we use uppercase for matrices/tensors.
# endregion pyright configuration ------------------------------------------------------


# region pytest configuration ----------------------------------------------------------
[tool.pytest]
# NOTE: currently unused https://docs.pytest.org/en/stable/reference/customize.html

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["src/", "tests/"]
addopts = [
    "--doctest-modules",
]
markers = []
required_plugins = []
# endregion pytest configuration -------------------------------------------------------
