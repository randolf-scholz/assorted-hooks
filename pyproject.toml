[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

# region project configuration ---------------------------------------------------------
[project]
name = "assorted-hooks"
version = "0.2.6"
authors = [{name="Randolf Scholz", email="randolf.scholz@gmail.com"},]
description = "Custom pre-commit hooks"

# meta-information
keywords = ["pre-commit"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Utilities",
    "Typing :: Typed"
]

# package content
license = {file="LICENSE"}
readme = "README.md"

# dependencies
requires-python = ">=3.11"
dependencies = [
    "pygithub>=2.3.0",
]

[project.urls]
homepage = "https://github.com/randolf-scholz/assorted-hooks"
documentation = "https://github.com/randolf-scholz/assorted-hooks"
repository = "https://github.com/randolf-scholz/assorted-hooks"

[project.scripts]
# regex hooks
check-github-issues = "assorted_hooks.check_github_issues:main"
# ast hooks
check-dunder-all = "assorted_hooks.ast.check_dunder_all:main"
check-direct-imports = "assorted_hooks.ast.check_direct_imports:main"
check-no-mixed-args = "assorted_hooks.ast.check_no_mixed_args:main"
check-standard-generics = "assorted_hooks.ast.check_standard_generics:main"
check-typing = "assorted_hooks.ast.check_typing:main"
# script hooks
python-check-clean-interface = "assorted_hooks.scripts.check_clean_interface:main"
pyproject-check-deps = "assorted_hooks.scripts.pyproject_check_dependencies:main"
pyproject-update-deps = "assorted_hooks.scripts.pyproject_update_dependencies:main"
pyproject-validate-version = "assorted_hooks.scripts.pyproject_validate_version:main"
# endregion project configuration ------------------------------------------------------



# region development dependencies ------------------------------------------------------
[tool.pdm.dev-dependencies]
dev = [
    "pre-commit>=3.7.0",
    "ruff>=0.4.0",
    "ruff-lsp>=0.0.53",
    "pyright>=1.1.359",
    "mypy>=1.9.0",
]
test = [
    "pytest>=8.1.1",
    "pytest-benchmark[histogram]>=4.0.0",
    "pytest-cov>=5.0.0",
    "pytest-rerunfailures>=14.0",
    "pytest-xdist>=3.5.0",
]
# endregion development.dependencies ---------------------------------------------------



# region ruff configuration ------------------------------------------------------------
[tool.ruff]
src = ["src/", "tests/"]
indent-width = 4
line-length = 88
target-version = "py311"
output-format = "concise"

[tool.ruff.lint]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

select = [
    "A",     # builtins
    "B",     # bugbear
    "C4",    # comprehensions
    "D",     # pydocstyle
    "E",     # pycodestyle
    "EXE",   # executable
    "F",     # pyflakes
    "I",     # import-order
    "UP",     # pyupgrade
    "PL",    # pylint
    "PIE",   # pie
    "PYI",   # pyi
    "PT",    # pytest
    "NPY",   # numpy
    "PERF",  # performance related
    "SIM",   # simplify
    "FBT",   # boolean-trap
    "RUF",   # ruff specific
    "ISC",   # implicit-str-concat
    "TRY",   # tryceratops
    "FURB",  # refurb
]
ignore = [
    # pydocstyle
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    # pycodestyle
    "E201",  # Whitespace after '('
    "E202",  # Whitespace before ')'
    "E203",  # Whitespace before ':'
    "E221",  # Multiple spaces before operator
    "E226",  # Missing whitespace around arithmetic operator
    "E231",  # Missing whitespace after ','
    "E241",  # Multiple spaces after comma
    "E271",  # Multiple spaces after keyword
    "E272",  # Multiple spaces before keyword
    # pyupgrade
    "UP007",  # Use `X | Y` for type annotations
    "UP015",  # Unnecessary open mode parameters
    "UP035",  # deprecated-import
    # pylint
    "PLC1901",  # compare-to-empty-string
    "PLC2401",  # non-ascii-name
    "PLR0124",  # Name compared with itself
    "PLR2004",  # Magic value used in comparison
    "PLR6301",  # no-self-use
    "PLW1641",  # Object does not implement __hash__ method
    # pylint "too-many-*" rules
    "PLR0904",  # Too many public methods
    "PLR0911",  # Too many return statements
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments in function definition
    "PLR0914",  # Too many local variables
    "PLR0915",  # Too many statements
    "PLR0916",  # Too many boolean expressions
    "PLR0917",  # Too many positional arguments
    # PYI
    "PYI019",  # Methods like ... should return typing.Self instead of custom TypeVar
    # PyTest
    "PT013",   # Found incorrect import of pytest, use simple import pytest instead
    "PT018",   # Assertion should be broken down into multiple parts
    # simplify
    "SIM118",  # Use `key in dict` instead of `key in dict.keys()`
    "SIM300",  # Yoda conditions are discouraged
    # RUFF
    "RUF001",  # ambiguous-unicode-character-string
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "RUF012",  # Mutable class attributes should be annotated with typing.ClassVar # FIXME: PEP 603
    "RUF013",  # PEP 484 prohibits implicit Optional # FIXME: https://github.com/astral-sh/ruff/issues/9334
    "RUF022",  # __all__ not sorted
    "RUF023",  # __slots__ not sorted
    "RUF025",  # use dict.fromkeys instead of dict comprehension
    # tryceratops
    "TRY003",  # Avoid specifying long messages outside the exception class
    # refurb
    "FURB140", # reimplemented-starmap (less efficient than comprehension)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 120
max-line-length = 120

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
# endregion ruff configuration ---------------------------------------------------------



# region pylint Configuration ----------------------------------------------------------
[tool.pylint]
[tool.pylint."MESSAGES CONTROL"]
enable= [
    "useless-suppression",
]
disable= [
    "C0103",  # invalid-name
    "C0144",  # non-ascii-name
    "C0204",  # bad-mcs-classmethod-argument
    "C0415",  # import-outside-toplevel
    "E0611",  # no-name-in-module
    "E1101",  # no-member  # FIXME: too many false positives
    "E1121",  # too-many-function-args  # too many false positives
    "E1123",  # unexpected-keyword-arg  # too many false positives
    "E1130",  # invalid-unary-operand-type
    "R0801",  # similar lines
    "R0902",  # too-many-instance-attributes
    "R0903",  # too-few-public-methods
    "R0911",  # too-many-return-statements
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
    "R0915",  # too-many-statements
#    "W0221",  # arguments-differ
#    "W0511",  # (fixme) (todos)
    "W1113",  # keyword-arg-before-vararg
    "W2301",  # unnecessary-ellipsis
]
fail-on= [
    "C0116",  # missing-function-docstring
]
fail-under= 9.0

[tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json and
# msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass
output-format="colorized"

[tool.pylint.FORMAT]
max-line-length=120

[tool.pylint.TYPECHECK]
# List of members which are set dynamically and missed by pylint inference system, and so shouldn't
# trigger E1101 when accessed. Python regular expressions are accepted.
generated-members=["numpy.*", "torch.*"]
# endregion pylint Configuration -------------------------------------------------------



# region mypy configuration ------------------------------------------------------------
[tool.mypy]
files = ["src/", "tests/"]
plugins = []

# platform configuration
python_version = "3.11"
#platform = "linux"

disable_error_code = [
    "func-returns-value",  # checks style, not type https://github.com/python/mypy/issues/6549
]

# warnings
warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# untyped definitions
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_untyped_defs = false

# strictness flags
allow_untyped_globals = false
allow_redefinition = false
#local_partial_types = true
no_implicit_reexport = false
#strict_equality = false
#strict = false
#disable_error_code = []
#enable_error_code =[]

# configuring error messages
show_error_context = true
show_column_numbers = true
show_error_end = true
hide_error_codes = false
pretty = false
no_error_summary = false
no_color_output = false
show_absolute_path = false
#soft_error_limit = 200

# incremental mode
no_incremental = false
#cache_dir = ".mypy_cache/"
#sqlite_cache = true
#cache_fine_grained = true
#skip_version_check = false
#skip_cache_mtime_checks = false

# advanced
pdb = false

[[tool.mypy.overrides]]
module = [
    "h5py.*",
    "matplotlib.*",
    "modin.*",
    "numba.*",
    "pandas.*",
    "pyarrow.*",
    "scipy.*",
    "sklearn.*",
    "tqdm.*",
    "github.*",
]
ignore_missing_imports = true
# endregion mypy configuration ---------------------------------------------------------



# region pyright Configuration ---------------------------------------------------------
[tool.pyright]
root = ""
venv = ".venv"
venvPath = "."
pythonVersion = "3.11"
pythonPlatform = "Linux"
stubPath = ""
include = ["src/", "tests/"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.ipynb_checkpoints",
]
executionEnvironments = [
    {root = "src/", pythonVersion = "3.11", pythonPlatform = "Linux", extraPaths = [""]}
]
useLibraryCodeForTypes = false   # otherwise hundreds of pandas false-positives.
# Type Check Diagnostics Settings
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
reportMissingImports = false
reportMissingTypeStubs = false
reportUnsupportedDunderAll = false
reportPrivateImportUsage = false
# endregion pyright Configuration ------------------------------------------------------



# region pytest configuration ----------------------------------------------------------
[tool.pytest]
# NOTE: currently unused https://docs.pytest.org/en/stable/reference/customize.html

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = [ "src/", "tests/"]
addopts = [
    "--doctest-modules",
    "--junit-xml=reports/pytest.xml",
    # rerunfailures options
#    "--reruns=",          # number of times to re-run failed tests. defaults to 0.
#    "--reruns-delay=",    # add time (seconds) delay between reruns.
#    "--only-rerun=",      # If passed, only rerun errors matching the regex provided.
    # coverage options
#    "--cov=assorted_hooks",  # Path or package name to measure during execution (multi-allowed).
#    "--cov-report=term:skip-covered",
#    "--cov-report=xml:reports/coverage.xml",
#    "--cov-report=annotate:reports/coverage",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "serial",
]
required_plugins = [
    "pytest-rerunfailures",
    "pytest-cov",
]
# endregion pytest configuration -------------------------------------------------------



# region coverage configuration --------------------------------------------------------
[tool.coverage]

[tool.coverage.paths]
source = ["src/assorted_hooks/"]

[tool.coverage.report]
exclude_lines = [
    "@abstractmethod",
    "@abc.abstractmethod",
    "@overload",
    "@typing.overload",
]

[tool.coverage.run]
source = ["src/"]
# endregion coverage configuration -----------------------------------------------------
